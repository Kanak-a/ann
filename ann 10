import tensorflow as tf
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

import matplotlib.pyplot as plt

iris = load_iris()
X,y = iris.data, iris.target
#spliting the dataset
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
y_train = scaler.fit_transform(X_test)

model = tf.keras.Sequential([
    tf.keras.layers.Input(shape=(X_train.shape[1],)),
    tf.keras.layers.Dense(1, activation='softmax')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(X_train, y_train, epochs=100, batch_size=16, verbose=0)

#evaluate the model
loss, accuracy = model.evaluate(X_test, y_test, verbose=0)
print('Test Loss: ', loss)
print('Test Accuracy: ', accuracy)

X_subset = X[:, :2]

# Create a scatter plot with different colors for each class
plt.figure(figsize=(8, 6))
plt.scatter(X_subset[:, 0], X_subset[:, 1], c=y, cmap="plasma", edgecolors='k')

# Add labels and title
plt.xlabel("Feature 1")
plt.ylabel("Feature 2")
plt.title("Iris Dataset - Feature 1 vs Feature 2 Visualization")

# Add legend
plt.legend(iris.target_names, loc="upper left")

# Show the plot
plt.grid(True)
plt.show()
